@using System.Text
@using System.Text.Json
@using WebApp.Models
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Add grade
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Value="@Grade.subject" Label="Subject" Variant="Variant.Outlined" ReadOnly="true"/>
        <MudSelect T="decimal" Label="Grade" @bind-Value="_grade" Variant="Variant.Outlined" Required="true">
            @foreach (var grade in _grades)
            {
                <MudSelectItem Value="@grade.Value">@grade.Key</MudSelectItem>
            }
        </MudSelect>
        <MudDatePicker Label="Grade date" Editable="true" @bind-Date="_date1" Mask="@(new DateMask("dd.MM.yyyy"))"
                       DateFormat="dd.MM.yyyy" Placeholder="de-AT Date" Variant="Variant.Outlined"/>
        <MudNumericField @bind-Value="_percentageInfluence" Label="Percentage influence" Variant="Variant.Outlined"
                         Step="10" Min="0" Max="100"/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="AddGrade">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private DateTime? _date1 = DateTime.Now;
    private Decimal _grade = 0;
    private int _percentageInfluence = 100;

    private Dictionary<string, decimal> _grades = new Dictionary<string, decimal>
    {
        { "1-", 0.85m }, { "1", 1m }, { "1+", 1.15m }, { "1.5", 1.5m },
        { "2-", 1.85m }, { "2", 2m }, { "2+", 2.15m }, { "2.5", 2.5m },
        { "3-", 2.85m }, { "3", 3m }, { "3+", 3.15m }, { "3.5", 3.5m },
        { "4-", 3.85m }, { "4", 4m }, { "4+", 4.15m }, { "4.5", 4.5m },
        { "5-", 4.85m }, { "5", 5m }, { "5+", 5.15m }, { "5.5", 5.5m },
        { "6-", 5.85m }, { "6", 6m }, { "6+", 6.15m }, { "6.5", 6.5m },
        { "7-", 6.85m }, { "7", 7m }, { "7+", 7.15m }, { "7.5", 7.5m },
        { "8-", 7.85m }, { "8", 8m }, { "8+", 8.15m }, { "8.5", 8.5m },
        { "9-", 8.85m }, { "9", 9m }, { "9+", 9.15m }, { "9.5", 9.5m },
        { "10-", 9.85m }, { "10", 10m }
    };

    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public GradeModel Grade { get; set; } = new GradeModel();

    private void Cancel() => MudDialog.Cancel();

    private async Task AddGrade()
    {
        GradeModel newGrade = new GradeModel
        {
            userId = 1,
            subject = Grade.subject,
            grade = _grade,
            percentageInfluence = _percentageInfluence,
            dateAdded = DateOnly.FromDateTime(_date1.Value)
        };
        try
        {
            var client = HttpClientFactory.CreateClient("WebApp.ServerAPI");
            var jsonContent = new StringContent(JsonSerializer.Serialize(newGrade), Encoding.UTF8, "application/json");
            using HttpResponseMessage response = await client.PostAsync("/grades/add", jsonContent);

            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(newGrade));
                Snackbar.Add("Grade Added", Severity.Success);
            }
            else
                Snackbar.Add("Failed to add grade", Severity.Error);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Snackbar.Add(e.ToString(), Severity.Error);
        }
    }

}